/*
 * PGW Payment API 4.3
 * Rest API for PGW payment purpose - LATEST
 *
 * The version of the OpenAPI document: 4.3
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * IppPlan
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class IppPlan {
  public static final String SERIALIZED_NAME_SEQUENCE_NO = "sequenceNo";
  @SerializedName(SERIALIZED_NAME_SEQUENCE_NO)
  private Integer sequenceNo;

  public static final String SERIALIZED_NAME_PERIOD = "period";
  @SerializedName(SERIALIZED_NAME_PERIOD)
  private Integer period;

  public static final String SERIALIZED_NAME_INTEREST_TYPE = "interestType";
  @SerializedName(SERIALIZED_NAME_INTEREST_TYPE)
  private String interestType;

  public static final String SERIALIZED_NAME_INTEREST_RATE = "interestRate";
  @SerializedName(SERIALIZED_NAME_INTEREST_RATE)
  private Double interestRate;

  public static final String SERIALIZED_NAME_MONTHLY_AMOUNT = "monthlyAmount";
  @SerializedName(SERIALIZED_NAME_MONTHLY_AMOUNT)
  private Double monthlyAmount;

  public static final String SERIALIZED_NAME_MONTHLY_INTEREST = "monthlyInterest";
  @SerializedName(SERIALIZED_NAME_MONTHLY_INTEREST)
  private Double monthlyInterest;

  public static final String SERIALIZED_NAME_CURRENCY_CODE = "currencyCode";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CODE)
  private String currencyCode;

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private String label;

  public static final String SERIALIZED_NAME_TERMS = "terms";
  @SerializedName(SERIALIZED_NAME_TERMS)
  private String terms;

  public static final String SERIALIZED_NAME_PAY_LATER_PERIOD = "payLaterPeriod";
  @SerializedName(SERIALIZED_NAME_PAY_LATER_PERIOD)
  private Integer payLaterPeriod;

  public IppPlan() {
  }

  public IppPlan sequenceNo(Integer sequenceNo) {
    
    
    
    
    this.sequenceNo = sequenceNo;
    return this;
  }

   /**
   * Get sequenceNo
   * @return sequenceNo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getSequenceNo() {
    return sequenceNo;
  }


  public void setSequenceNo(Integer sequenceNo) {
    
    
    
    this.sequenceNo = sequenceNo;
  }


  public IppPlan period(Integer period) {
    
    
    
    
    this.period = period;
    return this;
  }

   /**
   * Get period
   * @return period
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getPeriod() {
    return period;
  }


  public void setPeriod(Integer period) {
    
    
    
    this.period = period;
  }


  public IppPlan interestType(String interestType) {
    
    
    
    
    this.interestType = interestType;
    return this;
  }

   /**
   * Get interestType
   * @return interestType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getInterestType() {
    return interestType;
  }


  public void setInterestType(String interestType) {
    
    
    
    this.interestType = interestType;
  }


  public IppPlan interestRate(Double interestRate) {
    
    
    
    
    this.interestRate = interestRate;
    return this;
  }

   /**
   * Get interestRate
   * @return interestRate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getInterestRate() {
    return interestRate;
  }


  public void setInterestRate(Double interestRate) {
    
    
    
    this.interestRate = interestRate;
  }


  public IppPlan monthlyAmount(Double monthlyAmount) {
    
    
    
    
    this.monthlyAmount = monthlyAmount;
    return this;
  }

   /**
   * Get monthlyAmount
   * @return monthlyAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getMonthlyAmount() {
    return monthlyAmount;
  }


  public void setMonthlyAmount(Double monthlyAmount) {
    
    
    
    this.monthlyAmount = monthlyAmount;
  }


  public IppPlan monthlyInterest(Double monthlyInterest) {
    
    
    
    
    this.monthlyInterest = monthlyInterest;
    return this;
  }

   /**
   * Get monthlyInterest
   * @return monthlyInterest
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getMonthlyInterest() {
    return monthlyInterest;
  }


  public void setMonthlyInterest(Double monthlyInterest) {
    
    
    
    this.monthlyInterest = monthlyInterest;
  }


  public IppPlan currencyCode(String currencyCode) {
    
    
    
    
    this.currencyCode = currencyCode;
    return this;
  }

   /**
   * Get currencyCode
   * @return currencyCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCurrencyCode() {
    return currencyCode;
  }


  public void setCurrencyCode(String currencyCode) {
    
    
    
    this.currencyCode = currencyCode;
  }


  public IppPlan label(String label) {
    
    
    
    
    this.label = label;
    return this;
  }

   /**
   * Get label
   * @return label
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getLabel() {
    return label;
  }


  public void setLabel(String label) {
    
    
    
    this.label = label;
  }


  public IppPlan terms(String terms) {
    
    
    
    
    this.terms = terms;
    return this;
  }

   /**
   * Get terms
   * @return terms
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTerms() {
    return terms;
  }


  public void setTerms(String terms) {
    
    
    
    this.terms = terms;
  }


  public IppPlan payLaterPeriod(Integer payLaterPeriod) {
    
    
    
    
    this.payLaterPeriod = payLaterPeriod;
    return this;
  }

   /**
   * Get payLaterPeriod
   * @return payLaterPeriod
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getPayLaterPeriod() {
    return payLaterPeriod;
  }


  public void setPayLaterPeriod(Integer payLaterPeriod) {
    
    
    
    this.payLaterPeriod = payLaterPeriod;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the IppPlan instance itself
   */
  public IppPlan putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IppPlan ippPlan = (IppPlan) o;
    return Objects.equals(this.sequenceNo, ippPlan.sequenceNo) &&
        Objects.equals(this.period, ippPlan.period) &&
        Objects.equals(this.interestType, ippPlan.interestType) &&
        Objects.equals(this.interestRate, ippPlan.interestRate) &&
        Objects.equals(this.monthlyAmount, ippPlan.monthlyAmount) &&
        Objects.equals(this.monthlyInterest, ippPlan.monthlyInterest) &&
        Objects.equals(this.currencyCode, ippPlan.currencyCode) &&
        Objects.equals(this.label, ippPlan.label) &&
        Objects.equals(this.terms, ippPlan.terms) &&
        Objects.equals(this.payLaterPeriod, ippPlan.payLaterPeriod)&&
        Objects.equals(this.additionalProperties, ippPlan.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(sequenceNo, period, interestType, interestRate, monthlyAmount, monthlyInterest, currencyCode, label, terms, payLaterPeriod, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IppPlan {\n");
    sb.append("    sequenceNo: ").append(toIndentedString(sequenceNo)).append("\n");
    sb.append("    period: ").append(toIndentedString(period)).append("\n");
    sb.append("    interestType: ").append(toIndentedString(interestType)).append("\n");
    sb.append("    interestRate: ").append(toIndentedString(interestRate)).append("\n");
    sb.append("    monthlyAmount: ").append(toIndentedString(monthlyAmount)).append("\n");
    sb.append("    monthlyInterest: ").append(toIndentedString(monthlyInterest)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    terms: ").append(toIndentedString(terms)).append("\n");
    sb.append("    payLaterPeriod: ").append(toIndentedString(payLaterPeriod)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("sequenceNo");
    openapiFields.add("period");
    openapiFields.add("interestType");
    openapiFields.add("interestRate");
    openapiFields.add("monthlyAmount");
    openapiFields.add("monthlyInterest");
    openapiFields.add("currencyCode");
    openapiFields.add("label");
    openapiFields.add("terms");
    openapiFields.add("payLaterPeriod");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to IppPlan
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!IppPlan.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IppPlan is not found in the empty JSON string", IppPlan.openapiRequiredFields.toString()));
        }
      }
      if (!jsonObj.get("interestType").isJsonNull() && (jsonObj.get("interestType") != null && !jsonObj.get("interestType").isJsonNull()) && !jsonObj.get("interestType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `interestType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("interestType").toString()));
      }
      if (!jsonObj.get("currencyCode").isJsonNull() && (jsonObj.get("currencyCode") != null && !jsonObj.get("currencyCode").isJsonNull()) && !jsonObj.get("currencyCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currencyCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currencyCode").toString()));
      }
      if (!jsonObj.get("label").isJsonNull() && (jsonObj.get("label") != null && !jsonObj.get("label").isJsonNull()) && !jsonObj.get("label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label").toString()));
      }
      if (!jsonObj.get("terms").isJsonNull() && (jsonObj.get("terms") != null && !jsonObj.get("terms").isJsonNull()) && !jsonObj.get("terms").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `terms` to be a primitive type in the JSON string but got `%s`", jsonObj.get("terms").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IppPlan.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IppPlan' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IppPlan> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IppPlan.class));

       return (TypeAdapter<T>) new TypeAdapter<IppPlan>() {
           @Override
           public void write(JsonWriter out, IppPlan value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public IppPlan read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             IppPlan instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of IppPlan given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of IppPlan
  * @throws IOException if the JSON string is invalid with respect to IppPlan
  */
  public static IppPlan fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IppPlan.class);
  }

 /**
  * Convert an instance of IppPlan to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

