/*
 * PGW Payment API 4.3
 * Rest API for PGW payment purpose - LATEST
 *
 * The version of the OpenAPI document: 4.3
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * MerchantValidationApplePayResponse
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class MerchantValidationApplePayResponse {
  public static final String SERIALIZED_NAME_EPOCH_TIMESTAMP = "epochTimestamp";
  @SerializedName(SERIALIZED_NAME_EPOCH_TIMESTAMP)
  private Long epochTimestamp;

  public static final String SERIALIZED_NAME_EXPIRES_AT = "expiresAt";
  @SerializedName(SERIALIZED_NAME_EXPIRES_AT)
  private Long expiresAt;

  public static final String SERIALIZED_NAME_MERCHANT_SESSION_IDENTIFIER = "merchantSessionIdentifier";
  @SerializedName(SERIALIZED_NAME_MERCHANT_SESSION_IDENTIFIER)
  private String merchantSessionIdentifier;

  public static final String SERIALIZED_NAME_NONCE = "nonce";
  @SerializedName(SERIALIZED_NAME_NONCE)
  private String nonce;

  public static final String SERIALIZED_NAME_MERCHANT_IDENTIFIER = "merchantIdentifier";
  @SerializedName(SERIALIZED_NAME_MERCHANT_IDENTIFIER)
  private String merchantIdentifier;

  public static final String SERIALIZED_NAME_DOMAIN_NAME = "domainName";
  @SerializedName(SERIALIZED_NAME_DOMAIN_NAME)
  private String domainName;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_SIGNATURE = "signature";
  @SerializedName(SERIALIZED_NAME_SIGNATURE)
  private String signature;

  public static final String SERIALIZED_NAME_OPERATIONAL_ANALYTICS_IDENTIFIER = "operationalAnalyticsIdentifier";
  @SerializedName(SERIALIZED_NAME_OPERATIONAL_ANALYTICS_IDENTIFIER)
  private String operationalAnalyticsIdentifier;

  public static final String SERIALIZED_NAME_RETRIES = "retries";
  @SerializedName(SERIALIZED_NAME_RETRIES)
  private Integer retries;

  public static final String SERIALIZED_NAME_PSP_ID = "pspId";
  @SerializedName(SERIALIZED_NAME_PSP_ID)
  private String pspId;

  public static final String SERIALIZED_NAME_RESP_CODE = "respCode";
  @SerializedName(SERIALIZED_NAME_RESP_CODE)
  private String respCode;

  public static final String SERIALIZED_NAME_RESP_DESC = "respDesc";
  @SerializedName(SERIALIZED_NAME_RESP_DESC)
  private String respDesc;

  public MerchantValidationApplePayResponse() {
  }

  public MerchantValidationApplePayResponse epochTimestamp(Long epochTimestamp) {
    
    
    
    
    this.epochTimestamp = epochTimestamp;
    return this;
  }

   /**
   * Get epochTimestamp
   * @return epochTimestamp
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Long getEpochTimestamp() {
    return epochTimestamp;
  }


  public void setEpochTimestamp(Long epochTimestamp) {
    
    
    
    this.epochTimestamp = epochTimestamp;
  }


  public MerchantValidationApplePayResponse expiresAt(Long expiresAt) {
    
    
    
    
    this.expiresAt = expiresAt;
    return this;
  }

   /**
   * Get expiresAt
   * @return expiresAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Long getExpiresAt() {
    return expiresAt;
  }


  public void setExpiresAt(Long expiresAt) {
    
    
    
    this.expiresAt = expiresAt;
  }


  public MerchantValidationApplePayResponse merchantSessionIdentifier(String merchantSessionIdentifier) {
    
    
    
    
    this.merchantSessionIdentifier = merchantSessionIdentifier;
    return this;
  }

   /**
   * Get merchantSessionIdentifier
   * @return merchantSessionIdentifier
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getMerchantSessionIdentifier() {
    return merchantSessionIdentifier;
  }


  public void setMerchantSessionIdentifier(String merchantSessionIdentifier) {
    
    
    
    this.merchantSessionIdentifier = merchantSessionIdentifier;
  }


  public MerchantValidationApplePayResponse nonce(String nonce) {
    
    
    
    
    this.nonce = nonce;
    return this;
  }

   /**
   * Get nonce
   * @return nonce
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getNonce() {
    return nonce;
  }


  public void setNonce(String nonce) {
    
    
    
    this.nonce = nonce;
  }


  public MerchantValidationApplePayResponse merchantIdentifier(String merchantIdentifier) {
    
    
    
    
    this.merchantIdentifier = merchantIdentifier;
    return this;
  }

   /**
   * Get merchantIdentifier
   * @return merchantIdentifier
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getMerchantIdentifier() {
    return merchantIdentifier;
  }


  public void setMerchantIdentifier(String merchantIdentifier) {
    
    
    
    this.merchantIdentifier = merchantIdentifier;
  }


  public MerchantValidationApplePayResponse domainName(String domainName) {
    
    
    
    
    this.domainName = domainName;
    return this;
  }

   /**
   * Get domainName
   * @return domainName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDomainName() {
    return domainName;
  }


  public void setDomainName(String domainName) {
    
    
    
    this.domainName = domainName;
  }


  public MerchantValidationApplePayResponse displayName(String displayName) {
    
    
    
    
    this.displayName = displayName;
    return this;
  }

   /**
   * Get displayName
   * @return displayName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDisplayName() {
    return displayName;
  }


  public void setDisplayName(String displayName) {
    
    
    
    this.displayName = displayName;
  }


  public MerchantValidationApplePayResponse signature(String signature) {
    
    
    
    
    this.signature = signature;
    return this;
  }

   /**
   * Get signature
   * @return signature
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSignature() {
    return signature;
  }


  public void setSignature(String signature) {
    
    
    
    this.signature = signature;
  }


  public MerchantValidationApplePayResponse operationalAnalyticsIdentifier(String operationalAnalyticsIdentifier) {
    
    
    
    
    this.operationalAnalyticsIdentifier = operationalAnalyticsIdentifier;
    return this;
  }

   /**
   * Get operationalAnalyticsIdentifier
   * @return operationalAnalyticsIdentifier
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getOperationalAnalyticsIdentifier() {
    return operationalAnalyticsIdentifier;
  }


  public void setOperationalAnalyticsIdentifier(String operationalAnalyticsIdentifier) {
    
    
    
    this.operationalAnalyticsIdentifier = operationalAnalyticsIdentifier;
  }


  public MerchantValidationApplePayResponse retries(Integer retries) {
    
    
    
    
    this.retries = retries;
    return this;
  }

   /**
   * Get retries
   * @return retries
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getRetries() {
    return retries;
  }


  public void setRetries(Integer retries) {
    
    
    
    this.retries = retries;
  }


  public MerchantValidationApplePayResponse pspId(String pspId) {
    
    
    
    
    this.pspId = pspId;
    return this;
  }

   /**
   * Get pspId
   * @return pspId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPspId() {
    return pspId;
  }


  public void setPspId(String pspId) {
    
    
    
    this.pspId = pspId;
  }


  public MerchantValidationApplePayResponse respCode(String respCode) {
    
    
    
    
    this.respCode = respCode;
    return this;
  }

   /**
   * Get respCode
   * @return respCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getRespCode() {
    return respCode;
  }


  public void setRespCode(String respCode) {
    
    
    
    this.respCode = respCode;
  }


  public MerchantValidationApplePayResponse respDesc(String respDesc) {
    
    
    
    
    this.respDesc = respDesc;
    return this;
  }

   /**
   * Get respDesc
   * @return respDesc
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getRespDesc() {
    return respDesc;
  }


  public void setRespDesc(String respDesc) {
    
    
    
    this.respDesc = respDesc;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the MerchantValidationApplePayResponse instance itself
   */
  public MerchantValidationApplePayResponse putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MerchantValidationApplePayResponse merchantValidationApplePayResponse = (MerchantValidationApplePayResponse) o;
    return Objects.equals(this.epochTimestamp, merchantValidationApplePayResponse.epochTimestamp) &&
        Objects.equals(this.expiresAt, merchantValidationApplePayResponse.expiresAt) &&
        Objects.equals(this.merchantSessionIdentifier, merchantValidationApplePayResponse.merchantSessionIdentifier) &&
        Objects.equals(this.nonce, merchantValidationApplePayResponse.nonce) &&
        Objects.equals(this.merchantIdentifier, merchantValidationApplePayResponse.merchantIdentifier) &&
        Objects.equals(this.domainName, merchantValidationApplePayResponse.domainName) &&
        Objects.equals(this.displayName, merchantValidationApplePayResponse.displayName) &&
        Objects.equals(this.signature, merchantValidationApplePayResponse.signature) &&
        Objects.equals(this.operationalAnalyticsIdentifier, merchantValidationApplePayResponse.operationalAnalyticsIdentifier) &&
        Objects.equals(this.retries, merchantValidationApplePayResponse.retries) &&
        Objects.equals(this.pspId, merchantValidationApplePayResponse.pspId) &&
        Objects.equals(this.respCode, merchantValidationApplePayResponse.respCode) &&
        Objects.equals(this.respDesc, merchantValidationApplePayResponse.respDesc)&&
        Objects.equals(this.additionalProperties, merchantValidationApplePayResponse.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(epochTimestamp, expiresAt, merchantSessionIdentifier, nonce, merchantIdentifier, domainName, displayName, signature, operationalAnalyticsIdentifier, retries, pspId, respCode, respDesc, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MerchantValidationApplePayResponse {\n");
    sb.append("    epochTimestamp: ").append(toIndentedString(epochTimestamp)).append("\n");
    sb.append("    expiresAt: ").append(toIndentedString(expiresAt)).append("\n");
    sb.append("    merchantSessionIdentifier: ").append(toIndentedString(merchantSessionIdentifier)).append("\n");
    sb.append("    nonce: ").append(toIndentedString(nonce)).append("\n");
    sb.append("    merchantIdentifier: ").append(toIndentedString(merchantIdentifier)).append("\n");
    sb.append("    domainName: ").append(toIndentedString(domainName)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    signature: ").append(toIndentedString(signature)).append("\n");
    sb.append("    operationalAnalyticsIdentifier: ").append(toIndentedString(operationalAnalyticsIdentifier)).append("\n");
    sb.append("    retries: ").append(toIndentedString(retries)).append("\n");
    sb.append("    pspId: ").append(toIndentedString(pspId)).append("\n");
    sb.append("    respCode: ").append(toIndentedString(respCode)).append("\n");
    sb.append("    respDesc: ").append(toIndentedString(respDesc)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("epochTimestamp");
    openapiFields.add("expiresAt");
    openapiFields.add("merchantSessionIdentifier");
    openapiFields.add("nonce");
    openapiFields.add("merchantIdentifier");
    openapiFields.add("domainName");
    openapiFields.add("displayName");
    openapiFields.add("signature");
    openapiFields.add("operationalAnalyticsIdentifier");
    openapiFields.add("retries");
    openapiFields.add("pspId");
    openapiFields.add("respCode");
    openapiFields.add("respDesc");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to MerchantValidationApplePayResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!MerchantValidationApplePayResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MerchantValidationApplePayResponse is not found in the empty JSON string", MerchantValidationApplePayResponse.openapiRequiredFields.toString()));
        }
      }
      if (!jsonObj.get("merchantSessionIdentifier").isJsonNull() && (jsonObj.get("merchantSessionIdentifier") != null && !jsonObj.get("merchantSessionIdentifier").isJsonNull()) && !jsonObj.get("merchantSessionIdentifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchantSessionIdentifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchantSessionIdentifier").toString()));
      }
      if (!jsonObj.get("nonce").isJsonNull() && (jsonObj.get("nonce") != null && !jsonObj.get("nonce").isJsonNull()) && !jsonObj.get("nonce").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nonce` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nonce").toString()));
      }
      if (!jsonObj.get("merchantIdentifier").isJsonNull() && (jsonObj.get("merchantIdentifier") != null && !jsonObj.get("merchantIdentifier").isJsonNull()) && !jsonObj.get("merchantIdentifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchantIdentifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchantIdentifier").toString()));
      }
      if (!jsonObj.get("domainName").isJsonNull() && (jsonObj.get("domainName") != null && !jsonObj.get("domainName").isJsonNull()) && !jsonObj.get("domainName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domainName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domainName").toString()));
      }
      if (!jsonObj.get("displayName").isJsonNull() && (jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if (!jsonObj.get("signature").isJsonNull() && (jsonObj.get("signature") != null && !jsonObj.get("signature").isJsonNull()) && !jsonObj.get("signature").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signature` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signature").toString()));
      }
      if (!jsonObj.get("operationalAnalyticsIdentifier").isJsonNull() && (jsonObj.get("operationalAnalyticsIdentifier") != null && !jsonObj.get("operationalAnalyticsIdentifier").isJsonNull()) && !jsonObj.get("operationalAnalyticsIdentifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operationalAnalyticsIdentifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operationalAnalyticsIdentifier").toString()));
      }
      if (!jsonObj.get("pspId").isJsonNull() && (jsonObj.get("pspId") != null && !jsonObj.get("pspId").isJsonNull()) && !jsonObj.get("pspId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pspId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pspId").toString()));
      }
      if (!jsonObj.get("respCode").isJsonNull() && (jsonObj.get("respCode") != null && !jsonObj.get("respCode").isJsonNull()) && !jsonObj.get("respCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `respCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("respCode").toString()));
      }
      if (!jsonObj.get("respDesc").isJsonNull() && (jsonObj.get("respDesc") != null && !jsonObj.get("respDesc").isJsonNull()) && !jsonObj.get("respDesc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `respDesc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("respDesc").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MerchantValidationApplePayResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MerchantValidationApplePayResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MerchantValidationApplePayResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MerchantValidationApplePayResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<MerchantValidationApplePayResponse>() {
           @Override
           public void write(JsonWriter out, MerchantValidationApplePayResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public MerchantValidationApplePayResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             MerchantValidationApplePayResponse instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MerchantValidationApplePayResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MerchantValidationApplePayResponse
  * @throws IOException if the JSON string is invalid with respect to MerchantValidationApplePayResponse
  */
  public static MerchantValidationApplePayResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MerchantValidationApplePayResponse.class);
  }

 /**
  * Convert an instance of MerchantValidationApplePayResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

