/*
 * PGW Payment API 4.3
 * Rest API for PGW payment purpose - LATEST
 *
 * The version of the OpenAPI document: 4.3
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.LoyaltyRewards;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * LoyaltyDetails
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class LoyaltyDetails {
  public static final String SERIALIZED_NAME_PROVIDER_I_D = "providerID";
  @SerializedName(SERIALIZED_NAME_PROVIDER_I_D)
  private String providerID;

  public static final String SERIALIZED_NAME_ACCOUNT_NO = "accountNo";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_NO)
  private String accountNo;

  public static final String SERIALIZED_NAME_ACCOUNT_AUTH_DATA = "accountAuthData";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_AUTH_DATA)
  private String accountAuthData;

  public static final String SERIALIZED_NAME_QUERY_REFERENCE_SPECIFIED = "queryReferenceSpecified";
  @SerializedName(SERIALIZED_NAME_QUERY_REFERENCE_SPECIFIED)
  private Boolean queryReferenceSpecified;

  public static final String SERIALIZED_NAME_EXTERNAL_MERCHANT_ID = "externalMerchantId";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_MERCHANT_ID)
  private String externalMerchantId;

  public static final String SERIALIZED_NAME_REDEEM_AMOUNT = "redeemAmount";
  @SerializedName(SERIALIZED_NAME_REDEEM_AMOUNT)
  private Double redeemAmount;

  public static final String SERIALIZED_NAME_REWARDS = "rewards";
  @SerializedName(SERIALIZED_NAME_REWARDS)
  private List<LoyaltyRewards> rewards = null;

  public LoyaltyDetails() {
  }

  
  public LoyaltyDetails(
     Boolean queryReferenceSpecified
  ) {
    this();
    this.queryReferenceSpecified = queryReferenceSpecified;
  }

  public LoyaltyDetails providerID(String providerID) {
    
    
    
    
    this.providerID = providerID;
    return this;
  }

   /**
   * Get providerID
   * @return providerID
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getProviderID() {
    return providerID;
  }


  public void setProviderID(String providerID) {
    
    
    
    this.providerID = providerID;
  }


  public LoyaltyDetails accountNo(String accountNo) {
    
    
    
    
    this.accountNo = accountNo;
    return this;
  }

   /**
   * Get accountNo
   * @return accountNo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getAccountNo() {
    return accountNo;
  }


  public void setAccountNo(String accountNo) {
    
    
    
    this.accountNo = accountNo;
  }


  public LoyaltyDetails accountAuthData(String accountAuthData) {
    
    
    
    
    this.accountAuthData = accountAuthData;
    return this;
  }

   /**
   * Get accountAuthData
   * @return accountAuthData
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getAccountAuthData() {
    return accountAuthData;
  }


  public void setAccountAuthData(String accountAuthData) {
    
    
    
    this.accountAuthData = accountAuthData;
  }


   /**
   * Get queryReferenceSpecified
   * @return queryReferenceSpecified
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getQueryReferenceSpecified() {
    return queryReferenceSpecified;
  }




  public LoyaltyDetails externalMerchantId(String externalMerchantId) {
    
    
    
    
    this.externalMerchantId = externalMerchantId;
    return this;
  }

   /**
   * Get externalMerchantId
   * @return externalMerchantId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getExternalMerchantId() {
    return externalMerchantId;
  }


  public void setExternalMerchantId(String externalMerchantId) {
    
    
    
    this.externalMerchantId = externalMerchantId;
  }


  public LoyaltyDetails redeemAmount(Double redeemAmount) {
    
    
    
    
    this.redeemAmount = redeemAmount;
    return this;
  }

   /**
   * Get redeemAmount
   * @return redeemAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getRedeemAmount() {
    return redeemAmount;
  }


  public void setRedeemAmount(Double redeemAmount) {
    
    
    
    this.redeemAmount = redeemAmount;
  }


  public LoyaltyDetails rewards(List<LoyaltyRewards> rewards) {
    
    
    
    
    this.rewards = rewards;
    return this;
  }

  public LoyaltyDetails addRewardsItem(LoyaltyRewards rewardsItem) {
    if (this.rewards == null) {
      this.rewards = new ArrayList<>();
    }
    this.rewards.add(rewardsItem);
    return this;
  }

   /**
   * Get rewards
   * @return rewards
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<LoyaltyRewards> getRewards() {
    return rewards;
  }


  public void setRewards(List<LoyaltyRewards> rewards) {
    
    
    
    this.rewards = rewards;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the LoyaltyDetails instance itself
   */
  public LoyaltyDetails putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LoyaltyDetails loyaltyDetails = (LoyaltyDetails) o;
    return Objects.equals(this.providerID, loyaltyDetails.providerID) &&
        Objects.equals(this.accountNo, loyaltyDetails.accountNo) &&
        Objects.equals(this.accountAuthData, loyaltyDetails.accountAuthData) &&
        Objects.equals(this.queryReferenceSpecified, loyaltyDetails.queryReferenceSpecified) &&
        Objects.equals(this.externalMerchantId, loyaltyDetails.externalMerchantId) &&
        Objects.equals(this.redeemAmount, loyaltyDetails.redeemAmount) &&
        Objects.equals(this.rewards, loyaltyDetails.rewards)&&
        Objects.equals(this.additionalProperties, loyaltyDetails.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(providerID, accountNo, accountAuthData, queryReferenceSpecified, externalMerchantId, redeemAmount, rewards, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LoyaltyDetails {\n");
    sb.append("    providerID: ").append(toIndentedString(providerID)).append("\n");
    sb.append("    accountNo: ").append(toIndentedString(accountNo)).append("\n");
    sb.append("    accountAuthData: ").append(toIndentedString(accountAuthData)).append("\n");
    sb.append("    queryReferenceSpecified: ").append(toIndentedString(queryReferenceSpecified)).append("\n");
    sb.append("    externalMerchantId: ").append(toIndentedString(externalMerchantId)).append("\n");
    sb.append("    redeemAmount: ").append(toIndentedString(redeemAmount)).append("\n");
    sb.append("    rewards: ").append(toIndentedString(rewards)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("providerID");
    openapiFields.add("accountNo");
    openapiFields.add("accountAuthData");
    openapiFields.add("queryReferenceSpecified");
    openapiFields.add("externalMerchantId");
    openapiFields.add("redeemAmount");
    openapiFields.add("rewards");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to LoyaltyDetails
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!LoyaltyDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LoyaltyDetails is not found in the empty JSON string", LoyaltyDetails.openapiRequiredFields.toString()));
        }
      }
      if (!jsonObj.get("providerID").isJsonNull() && (jsonObj.get("providerID") != null && !jsonObj.get("providerID").isJsonNull()) && !jsonObj.get("providerID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `providerID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("providerID").toString()));
      }
      if (!jsonObj.get("accountNo").isJsonNull() && (jsonObj.get("accountNo") != null && !jsonObj.get("accountNo").isJsonNull()) && !jsonObj.get("accountNo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountNo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountNo").toString()));
      }
      if (!jsonObj.get("accountAuthData").isJsonNull() && (jsonObj.get("accountAuthData") != null && !jsonObj.get("accountAuthData").isJsonNull()) && !jsonObj.get("accountAuthData").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountAuthData` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountAuthData").toString()));
      }
      if (!jsonObj.get("externalMerchantId").isJsonNull() && (jsonObj.get("externalMerchantId") != null && !jsonObj.get("externalMerchantId").isJsonNull()) && !jsonObj.get("externalMerchantId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalMerchantId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("externalMerchantId").toString()));
      }
      if (jsonObj.get("rewards") != null && !jsonObj.get("rewards").isJsonNull()) {
        JsonArray jsonArrayrewards = jsonObj.getAsJsonArray("rewards");
        if (jsonArrayrewards != null) {
          // ensure the json data is an array
          if (!jsonObj.get("rewards").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `rewards` to be an array in the JSON string but got `%s`", jsonObj.get("rewards").toString()));
          }

          // validate the optional field `rewards` (array)
          for (int i = 0; i < jsonArrayrewards.size(); i++) {
            LoyaltyRewards.validateJsonObject(jsonArrayrewards.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LoyaltyDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LoyaltyDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LoyaltyDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LoyaltyDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<LoyaltyDetails>() {
           @Override
           public void write(JsonWriter out, LoyaltyDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public LoyaltyDetails read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             LoyaltyDetails instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of LoyaltyDetails given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of LoyaltyDetails
  * @throws IOException if the JSON string is invalid with respect to LoyaltyDetails
  */
  public static LoyaltyDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LoyaltyDetails.class);
  }

 /**
  * Convert an instance of LoyaltyDetails to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

