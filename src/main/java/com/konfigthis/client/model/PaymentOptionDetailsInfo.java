/*
 * PGW Payment API 4.3
 * Rest API for PGW payment purpose - LATEST
 *
 * The version of the OpenAPI document: 4.3
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.IppPlan;
import com.konfigthis.client.model.PaymentOptionDetailsCustomData;
import com.konfigthis.client.model.PaymentOptionDetailsInfoProvider;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * PaymentOptionDetailsInfo
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class PaymentOptionDetailsInfo {
  public static final String SERIALIZED_NAME_TERMS = "terms";
  @SerializedName(SERIALIZED_NAME_TERMS)
  private String terms;

  public static final String SERIALIZED_NAME_PROMO_URL = "promoUrl";
  @SerializedName(SERIALIZED_NAME_PROMO_URL)
  private String promoUrl;

  public static final String SERIALIZED_NAME_PLANS = "plans";
  @SerializedName(SERIALIZED_NAME_PLANS)
  private List<IppPlan> plans = null;

  public static final String SERIALIZED_NAME_CUSTOM_DATA = "customData";
  @SerializedName(SERIALIZED_NAME_CUSTOM_DATA)
  private List<PaymentOptionDetailsCustomData> customData = null;

  public static final String SERIALIZED_NAME_PROVIDER = "provider";
  @SerializedName(SERIALIZED_NAME_PROVIDER)
  private PaymentOptionDetailsInfoProvider provider;

  public static final String SERIALIZED_NAME_LEARN_MORE_URL = "learnMoreUrl";
  @SerializedName(SERIALIZED_NAME_LEARN_MORE_URL)
  private String learnMoreUrl;

  public static final String SERIALIZED_NAME_TERMS_CONSENT = "termsConsent";
  @SerializedName(SERIALIZED_NAME_TERMS_CONSENT)
  private Boolean termsConsent;

  public PaymentOptionDetailsInfo() {
  }

  public PaymentOptionDetailsInfo terms(String terms) {
    
    
    
    
    this.terms = terms;
    return this;
  }

   /**
   * Get terms
   * @return terms
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTerms() {
    return terms;
  }


  public void setTerms(String terms) {
    
    
    
    this.terms = terms;
  }


  public PaymentOptionDetailsInfo promoUrl(String promoUrl) {
    
    
    
    
    this.promoUrl = promoUrl;
    return this;
  }

   /**
   * Get promoUrl
   * @return promoUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPromoUrl() {
    return promoUrl;
  }


  public void setPromoUrl(String promoUrl) {
    
    
    
    this.promoUrl = promoUrl;
  }


  public PaymentOptionDetailsInfo plans(List<IppPlan> plans) {
    
    
    
    
    this.plans = plans;
    return this;
  }

  public PaymentOptionDetailsInfo addPlansItem(IppPlan plansItem) {
    if (this.plans == null) {
      this.plans = new ArrayList<>();
    }
    this.plans.add(plansItem);
    return this;
  }

   /**
   * Get plans
   * @return plans
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<IppPlan> getPlans() {
    return plans;
  }


  public void setPlans(List<IppPlan> plans) {
    
    
    
    this.plans = plans;
  }


  public PaymentOptionDetailsInfo customData(List<PaymentOptionDetailsCustomData> customData) {
    
    
    
    
    this.customData = customData;
    return this;
  }

  public PaymentOptionDetailsInfo addCustomDataItem(PaymentOptionDetailsCustomData customDataItem) {
    if (this.customData == null) {
      this.customData = new ArrayList<>();
    }
    this.customData.add(customDataItem);
    return this;
  }

   /**
   * Get customData
   * @return customData
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<PaymentOptionDetailsCustomData> getCustomData() {
    return customData;
  }


  public void setCustomData(List<PaymentOptionDetailsCustomData> customData) {
    
    
    
    this.customData = customData;
  }


  public PaymentOptionDetailsInfo provider(PaymentOptionDetailsInfoProvider provider) {
    
    
    
    
    this.provider = provider;
    return this;
  }

   /**
   * Get provider
   * @return provider
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PaymentOptionDetailsInfoProvider getProvider() {
    return provider;
  }


  public void setProvider(PaymentOptionDetailsInfoProvider provider) {
    
    
    
    this.provider = provider;
  }


  public PaymentOptionDetailsInfo learnMoreUrl(String learnMoreUrl) {
    
    
    
    
    this.learnMoreUrl = learnMoreUrl;
    return this;
  }

   /**
   * Get learnMoreUrl
   * @return learnMoreUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getLearnMoreUrl() {
    return learnMoreUrl;
  }


  public void setLearnMoreUrl(String learnMoreUrl) {
    
    
    
    this.learnMoreUrl = learnMoreUrl;
  }


  public PaymentOptionDetailsInfo termsConsent(Boolean termsConsent) {
    
    
    
    
    this.termsConsent = termsConsent;
    return this;
  }

   /**
   * Get termsConsent
   * @return termsConsent
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getTermsConsent() {
    return termsConsent;
  }


  public void setTermsConsent(Boolean termsConsent) {
    
    
    
    this.termsConsent = termsConsent;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the PaymentOptionDetailsInfo instance itself
   */
  public PaymentOptionDetailsInfo putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymentOptionDetailsInfo paymentOptionDetailsInfo = (PaymentOptionDetailsInfo) o;
    return Objects.equals(this.terms, paymentOptionDetailsInfo.terms) &&
        Objects.equals(this.promoUrl, paymentOptionDetailsInfo.promoUrl) &&
        Objects.equals(this.plans, paymentOptionDetailsInfo.plans) &&
        Objects.equals(this.customData, paymentOptionDetailsInfo.customData) &&
        Objects.equals(this.provider, paymentOptionDetailsInfo.provider) &&
        Objects.equals(this.learnMoreUrl, paymentOptionDetailsInfo.learnMoreUrl) &&
        Objects.equals(this.termsConsent, paymentOptionDetailsInfo.termsConsent)&&
        Objects.equals(this.additionalProperties, paymentOptionDetailsInfo.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(terms, promoUrl, plans, customData, provider, learnMoreUrl, termsConsent, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentOptionDetailsInfo {\n");
    sb.append("    terms: ").append(toIndentedString(terms)).append("\n");
    sb.append("    promoUrl: ").append(toIndentedString(promoUrl)).append("\n");
    sb.append("    plans: ").append(toIndentedString(plans)).append("\n");
    sb.append("    customData: ").append(toIndentedString(customData)).append("\n");
    sb.append("    provider: ").append(toIndentedString(provider)).append("\n");
    sb.append("    learnMoreUrl: ").append(toIndentedString(learnMoreUrl)).append("\n");
    sb.append("    termsConsent: ").append(toIndentedString(termsConsent)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("terms");
    openapiFields.add("promoUrl");
    openapiFields.add("plans");
    openapiFields.add("customData");
    openapiFields.add("provider");
    openapiFields.add("learnMoreUrl");
    openapiFields.add("termsConsent");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PaymentOptionDetailsInfo
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PaymentOptionDetailsInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PaymentOptionDetailsInfo is not found in the empty JSON string", PaymentOptionDetailsInfo.openapiRequiredFields.toString()));
        }
      }
      if (!jsonObj.get("terms").isJsonNull() && (jsonObj.get("terms") != null && !jsonObj.get("terms").isJsonNull()) && !jsonObj.get("terms").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `terms` to be a primitive type in the JSON string but got `%s`", jsonObj.get("terms").toString()));
      }
      if (!jsonObj.get("promoUrl").isJsonNull() && (jsonObj.get("promoUrl") != null && !jsonObj.get("promoUrl").isJsonNull()) && !jsonObj.get("promoUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `promoUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("promoUrl").toString()));
      }
      if (jsonObj.get("plans") != null && !jsonObj.get("plans").isJsonNull()) {
        JsonArray jsonArrayplans = jsonObj.getAsJsonArray("plans");
        if (jsonArrayplans != null) {
          // ensure the json data is an array
          if (!jsonObj.get("plans").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `plans` to be an array in the JSON string but got `%s`", jsonObj.get("plans").toString()));
          }

          // validate the optional field `plans` (array)
          for (int i = 0; i < jsonArrayplans.size(); i++) {
            IppPlan.validateJsonObject(jsonArrayplans.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("customData") != null && !jsonObj.get("customData").isJsonNull()) {
        JsonArray jsonArraycustomData = jsonObj.getAsJsonArray("customData");
        if (jsonArraycustomData != null) {
          // ensure the json data is an array
          if (!jsonObj.get("customData").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `customData` to be an array in the JSON string but got `%s`", jsonObj.get("customData").toString()));
          }

          // validate the optional field `customData` (array)
          for (int i = 0; i < jsonArraycustomData.size(); i++) {
            PaymentOptionDetailsCustomData.validateJsonObject(jsonArraycustomData.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `provider`
      if (jsonObj.get("provider") != null && !jsonObj.get("provider").isJsonNull()) {
        PaymentOptionDetailsInfoProvider.validateJsonObject(jsonObj.getAsJsonObject("provider"));
      }
      if (!jsonObj.get("learnMoreUrl").isJsonNull() && (jsonObj.get("learnMoreUrl") != null && !jsonObj.get("learnMoreUrl").isJsonNull()) && !jsonObj.get("learnMoreUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `learnMoreUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("learnMoreUrl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PaymentOptionDetailsInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PaymentOptionDetailsInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PaymentOptionDetailsInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PaymentOptionDetailsInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<PaymentOptionDetailsInfo>() {
           @Override
           public void write(JsonWriter out, PaymentOptionDetailsInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public PaymentOptionDetailsInfo read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             PaymentOptionDetailsInfo instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PaymentOptionDetailsInfo given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PaymentOptionDetailsInfo
  * @throws IOException if the JSON string is invalid with respect to PaymentOptionDetailsInfo
  */
  public static PaymentOptionDetailsInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PaymentOptionDetailsInfo.class);
  }

 /**
  * Convert an instance of PaymentOptionDetailsInfo to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

