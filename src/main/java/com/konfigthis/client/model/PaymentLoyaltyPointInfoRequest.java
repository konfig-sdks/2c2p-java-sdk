/*
 * PGW Payment API 4.3
 * Rest API for PGW payment purpose - LATEST
 *
 * The version of the OpenAPI document: 4.3
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.BrowserDetails;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * PaymentLoyaltyPointInfoRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class PaymentLoyaltyPointInfoRequest {
  public static final String SERIALIZED_NAME_PROVIDER_I_D = "providerID";
  @SerializedName(SERIALIZED_NAME_PROVIDER_I_D)
  private String providerID;

  public static final String SERIALIZED_NAME_PROFILE_I_D = "profileID";
  @SerializedName(SERIALIZED_NAME_PROFILE_I_D)
  private String profileID;

  public static final String SERIALIZED_NAME_REFERENCE_I_D = "referenceID";
  @SerializedName(SERIALIZED_NAME_REFERENCE_I_D)
  private String referenceID;

  public static final String SERIALIZED_NAME_CARD_NO = "cardNo";
  @SerializedName(SERIALIZED_NAME_CARD_NO)
  private String cardNo;

  public static final String SERIALIZED_NAME_EXPIRY_MONTH = "expiryMonth";
  @SerializedName(SERIALIZED_NAME_EXPIRY_MONTH)
  private String expiryMonth;

  public static final String SERIALIZED_NAME_EXPIRY_YEAR = "expiryYear";
  @SerializedName(SERIALIZED_NAME_EXPIRY_YEAR)
  private String expiryYear;

  public static final String SERIALIZED_NAME_PAYMENT_TOKEN = "paymentToken";
  @SerializedName(SERIALIZED_NAME_PAYMENT_TOKEN)
  private String paymentToken;

  public static final String SERIALIZED_NAME_LOCALE = "locale";
  @SerializedName(SERIALIZED_NAME_LOCALE)
  private String locale;

  public static final String SERIALIZED_NAME_CLIENT_I_D = "clientID";
  @SerializedName(SERIALIZED_NAME_CLIENT_I_D)
  private UUID clientID;

  public static final String SERIALIZED_NAME_BROWSER_DETAILS = "browserDetails";
  @SerializedName(SERIALIZED_NAME_BROWSER_DETAILS)
  private BrowserDetails browserDetails;

  public PaymentLoyaltyPointInfoRequest() {
  }

  public PaymentLoyaltyPointInfoRequest providerID(String providerID) {
    
    
    
    
    this.providerID = providerID;
    return this;
  }

   /**
   * Get providerID
   * @return providerID
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getProviderID() {
    return providerID;
  }


  public void setProviderID(String providerID) {
    
    
    
    this.providerID = providerID;
  }


  public PaymentLoyaltyPointInfoRequest profileID(String profileID) {
    
    
    
    
    this.profileID = profileID;
    return this;
  }

   /**
   * Get profileID
   * @return profileID
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getProfileID() {
    return profileID;
  }


  public void setProfileID(String profileID) {
    
    
    
    this.profileID = profileID;
  }


  public PaymentLoyaltyPointInfoRequest referenceID(String referenceID) {
    
    
    
    
    this.referenceID = referenceID;
    return this;
  }

   /**
   * Get referenceID
   * @return referenceID
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getReferenceID() {
    return referenceID;
  }


  public void setReferenceID(String referenceID) {
    
    
    
    this.referenceID = referenceID;
  }


  public PaymentLoyaltyPointInfoRequest cardNo(String cardNo) {
    
    
    
    
    this.cardNo = cardNo;
    return this;
  }

   /**
   * Get cardNo
   * @return cardNo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCardNo() {
    return cardNo;
  }


  public void setCardNo(String cardNo) {
    
    
    
    this.cardNo = cardNo;
  }


  public PaymentLoyaltyPointInfoRequest expiryMonth(String expiryMonth) {
    
    
    
    
    this.expiryMonth = expiryMonth;
    return this;
  }

   /**
   * Get expiryMonth
   * @return expiryMonth
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getExpiryMonth() {
    return expiryMonth;
  }


  public void setExpiryMonth(String expiryMonth) {
    
    
    
    this.expiryMonth = expiryMonth;
  }


  public PaymentLoyaltyPointInfoRequest expiryYear(String expiryYear) {
    
    
    
    
    this.expiryYear = expiryYear;
    return this;
  }

   /**
   * Get expiryYear
   * @return expiryYear
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getExpiryYear() {
    return expiryYear;
  }


  public void setExpiryYear(String expiryYear) {
    
    
    
    this.expiryYear = expiryYear;
  }


  public PaymentLoyaltyPointInfoRequest paymentToken(String paymentToken) {
    
    
    
    
    this.paymentToken = paymentToken;
    return this;
  }

   /**
   * Get paymentToken
   * @return paymentToken
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getPaymentToken() {
    return paymentToken;
  }


  public void setPaymentToken(String paymentToken) {
    
    
    
    this.paymentToken = paymentToken;
  }


  public PaymentLoyaltyPointInfoRequest locale(String locale) {
    
    
    
    
    this.locale = locale;
    return this;
  }

   /**
   * Get locale
   * @return locale
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getLocale() {
    return locale;
  }


  public void setLocale(String locale) {
    
    
    
    this.locale = locale;
  }


  public PaymentLoyaltyPointInfoRequest clientID(UUID clientID) {
    
    
    
    
    this.clientID = clientID;
    return this;
  }

   /**
   * Get clientID
   * @return clientID
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public UUID getClientID() {
    return clientID;
  }


  public void setClientID(UUID clientID) {
    
    
    
    this.clientID = clientID;
  }


  public PaymentLoyaltyPointInfoRequest browserDetails(BrowserDetails browserDetails) {
    
    
    
    
    this.browserDetails = browserDetails;
    return this;
  }

   /**
   * Get browserDetails
   * @return browserDetails
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BrowserDetails getBrowserDetails() {
    return browserDetails;
  }


  public void setBrowserDetails(BrowserDetails browserDetails) {
    
    
    
    this.browserDetails = browserDetails;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the PaymentLoyaltyPointInfoRequest instance itself
   */
  public PaymentLoyaltyPointInfoRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymentLoyaltyPointInfoRequest paymentLoyaltyPointInfoRequest = (PaymentLoyaltyPointInfoRequest) o;
    return Objects.equals(this.providerID, paymentLoyaltyPointInfoRequest.providerID) &&
        Objects.equals(this.profileID, paymentLoyaltyPointInfoRequest.profileID) &&
        Objects.equals(this.referenceID, paymentLoyaltyPointInfoRequest.referenceID) &&
        Objects.equals(this.cardNo, paymentLoyaltyPointInfoRequest.cardNo) &&
        Objects.equals(this.expiryMonth, paymentLoyaltyPointInfoRequest.expiryMonth) &&
        Objects.equals(this.expiryYear, paymentLoyaltyPointInfoRequest.expiryYear) &&
        Objects.equals(this.paymentToken, paymentLoyaltyPointInfoRequest.paymentToken) &&
        Objects.equals(this.locale, paymentLoyaltyPointInfoRequest.locale) &&
        Objects.equals(this.clientID, paymentLoyaltyPointInfoRequest.clientID) &&
        Objects.equals(this.browserDetails, paymentLoyaltyPointInfoRequest.browserDetails)&&
        Objects.equals(this.additionalProperties, paymentLoyaltyPointInfoRequest.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(providerID, profileID, referenceID, cardNo, expiryMonth, expiryYear, paymentToken, locale, clientID, browserDetails, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentLoyaltyPointInfoRequest {\n");
    sb.append("    providerID: ").append(toIndentedString(providerID)).append("\n");
    sb.append("    profileID: ").append(toIndentedString(profileID)).append("\n");
    sb.append("    referenceID: ").append(toIndentedString(referenceID)).append("\n");
    sb.append("    cardNo: ").append(toIndentedString(cardNo)).append("\n");
    sb.append("    expiryMonth: ").append(toIndentedString(expiryMonth)).append("\n");
    sb.append("    expiryYear: ").append(toIndentedString(expiryYear)).append("\n");
    sb.append("    paymentToken: ").append(toIndentedString(paymentToken)).append("\n");
    sb.append("    locale: ").append(toIndentedString(locale)).append("\n");
    sb.append("    clientID: ").append(toIndentedString(clientID)).append("\n");
    sb.append("    browserDetails: ").append(toIndentedString(browserDetails)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("providerID");
    openapiFields.add("profileID");
    openapiFields.add("referenceID");
    openapiFields.add("cardNo");
    openapiFields.add("expiryMonth");
    openapiFields.add("expiryYear");
    openapiFields.add("paymentToken");
    openapiFields.add("locale");
    openapiFields.add("clientID");
    openapiFields.add("browserDetails");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("paymentToken");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PaymentLoyaltyPointInfoRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PaymentLoyaltyPointInfoRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PaymentLoyaltyPointInfoRequest is not found in the empty JSON string", PaymentLoyaltyPointInfoRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PaymentLoyaltyPointInfoRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("providerID").isJsonNull() && (jsonObj.get("providerID") != null && !jsonObj.get("providerID").isJsonNull()) && !jsonObj.get("providerID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `providerID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("providerID").toString()));
      }
      if (!jsonObj.get("profileID").isJsonNull() && (jsonObj.get("profileID") != null && !jsonObj.get("profileID").isJsonNull()) && !jsonObj.get("profileID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `profileID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("profileID").toString()));
      }
      if (!jsonObj.get("referenceID").isJsonNull() && (jsonObj.get("referenceID") != null && !jsonObj.get("referenceID").isJsonNull()) && !jsonObj.get("referenceID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `referenceID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("referenceID").toString()));
      }
      if (!jsonObj.get("cardNo").isJsonNull() && (jsonObj.get("cardNo") != null && !jsonObj.get("cardNo").isJsonNull()) && !jsonObj.get("cardNo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardNo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardNo").toString()));
      }
      if (!jsonObj.get("expiryMonth").isJsonNull() && (jsonObj.get("expiryMonth") != null && !jsonObj.get("expiryMonth").isJsonNull()) && !jsonObj.get("expiryMonth").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expiryMonth` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expiryMonth").toString()));
      }
      if (!jsonObj.get("expiryYear").isJsonNull() && (jsonObj.get("expiryYear") != null && !jsonObj.get("expiryYear").isJsonNull()) && !jsonObj.get("expiryYear").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expiryYear` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expiryYear").toString()));
      }
      if (!jsonObj.get("paymentToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentToken").toString()));
      }
      if (!jsonObj.get("locale").isJsonNull() && (jsonObj.get("locale") != null && !jsonObj.get("locale").isJsonNull()) && !jsonObj.get("locale").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locale` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locale").toString()));
      }
      if ((jsonObj.get("clientID") != null && !jsonObj.get("clientID").isJsonNull()) && !jsonObj.get("clientID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientID").toString()));
      }
      // validate the optional field `browserDetails`
      if (jsonObj.get("browserDetails") != null && !jsonObj.get("browserDetails").isJsonNull()) {
        BrowserDetails.validateJsonObject(jsonObj.getAsJsonObject("browserDetails"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PaymentLoyaltyPointInfoRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PaymentLoyaltyPointInfoRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PaymentLoyaltyPointInfoRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PaymentLoyaltyPointInfoRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<PaymentLoyaltyPointInfoRequest>() {
           @Override
           public void write(JsonWriter out, PaymentLoyaltyPointInfoRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public PaymentLoyaltyPointInfoRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             PaymentLoyaltyPointInfoRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PaymentLoyaltyPointInfoRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PaymentLoyaltyPointInfoRequest
  * @throws IOException if the JSON string is invalid with respect to PaymentLoyaltyPointInfoRequest
  */
  public static PaymentLoyaltyPointInfoRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PaymentLoyaltyPointInfoRequest.class);
  }

 /**
  * Convert an instance of PaymentLoyaltyPointInfoRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

