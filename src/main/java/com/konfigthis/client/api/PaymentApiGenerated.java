/*
 * PGW Payment API 4.3
 * Rest API for PGW payment purpose - LATEST
 *
 * The version of the OpenAPI document: 4.3
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.BrowserDetails;
import com.konfigthis.client.model.PaymentParamsRequestV43;
import com.konfigthis.client.model.PaymentRequestV43;
import com.konfigthis.client.model.PaymentResponse;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class PaymentApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PaymentApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public PaymentApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createPaymentCall(PaymentRequestV43 paymentRequestV43, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = paymentRequestV43;

        // create path and map variables
        String localVarPath = "/payment/4.3/payment";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/json-patch+json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPaymentValidateBeforeCall(PaymentRequestV43 paymentRequestV43, final ApiCallback _callback) throws ApiException {
        return createPaymentCall(paymentRequestV43, _callback);

    }


    private ApiResponse<PaymentResponse> createPaymentWithHttpInfo(PaymentRequestV43 paymentRequestV43) throws ApiException {
        okhttp3.Call localVarCall = createPaymentValidateBeforeCall(paymentRequestV43, null);
        Type localVarReturnType = new TypeToken<PaymentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createPaymentAsync(PaymentRequestV43 paymentRequestV43, final ApiCallback<PaymentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPaymentValidateBeforeCall(paymentRequestV43, _callback);
        Type localVarReturnType = new TypeToken<PaymentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreatePaymentRequestBuilder {
        private final String paymentToken;
        private PaymentParamsRequestV43 payment;
        private String responseReturnUrl;
        private String clientIP;
        private String locale;
        private UUID clientID;
        private BrowserDetails browserDetails;

        private CreatePaymentRequestBuilder(String paymentToken) {
            this.paymentToken = paymentToken;
        }

        /**
         * Set payment
         * @param payment  (optional)
         * @return CreatePaymentRequestBuilder
         */
        public CreatePaymentRequestBuilder payment(PaymentParamsRequestV43 payment) {
            this.payment = payment;
            return this;
        }
        
        /**
         * Set responseReturnUrl
         * @param responseReturnUrl  (optional)
         * @return CreatePaymentRequestBuilder
         */
        public CreatePaymentRequestBuilder responseReturnUrl(String responseReturnUrl) {
            this.responseReturnUrl = responseReturnUrl;
            return this;
        }
        
        /**
         * Set clientIP
         * @param clientIP  (optional)
         * @return CreatePaymentRequestBuilder
         */
        public CreatePaymentRequestBuilder clientIP(String clientIP) {
            this.clientIP = clientIP;
            return this;
        }
        
        /**
         * Set locale
         * @param locale  (optional)
         * @return CreatePaymentRequestBuilder
         */
        public CreatePaymentRequestBuilder locale(String locale) {
            this.locale = locale;
            return this;
        }
        
        /**
         * Set clientID
         * @param clientID  (optional)
         * @return CreatePaymentRequestBuilder
         */
        public CreatePaymentRequestBuilder clientID(UUID clientID) {
            this.clientID = clientID;
            return this;
        }
        
        /**
         * Set browserDetails
         * @param browserDetails  (optional)
         * @return CreatePaymentRequestBuilder
         */
        public CreatePaymentRequestBuilder browserDetails(BrowserDetails browserDetails) {
            this.browserDetails = browserDetails;
            return this;
        }
        
        /**
         * Build call for createPayment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PaymentRequestV43 paymentRequestV43 = buildBodyParams();
            return createPaymentCall(paymentRequestV43, _callback);
        }

        private PaymentRequestV43 buildBodyParams() {
            PaymentRequestV43 paymentRequestV43 = new PaymentRequestV43();
            paymentRequestV43.payment(this.payment);
            paymentRequestV43.responseReturnUrl(this.responseReturnUrl);
            paymentRequestV43.clientIP(this.clientIP);
            paymentRequestV43.paymentToken(this.paymentToken);
            paymentRequestV43.locale(this.locale);
            paymentRequestV43.clientID(this.clientID);
            paymentRequestV43.browserDetails(this.browserDetails);
            return paymentRequestV43;
        }

        /**
         * Execute createPayment request
         * @return PaymentResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public PaymentResponse execute() throws ApiException {
            PaymentRequestV43 paymentRequestV43 = buildBodyParams();
            ApiResponse<PaymentResponse> localVarResp = createPaymentWithHttpInfo(paymentRequestV43);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createPayment request with HTTP info returned
         * @return ApiResponse&lt;PaymentResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PaymentResponse> executeWithHttpInfo() throws ApiException {
            PaymentRequestV43 paymentRequestV43 = buildBodyParams();
            return createPaymentWithHttpInfo(paymentRequestV43);
        }

        /**
         * Execute createPayment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PaymentResponse> _callback) throws ApiException {
            PaymentRequestV43 paymentRequestV43 = buildBodyParams();
            return createPaymentAsync(paymentRequestV43, _callback);
        }
    }

    /**
     * 
     * 
     * @return CreatePaymentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CreatePaymentRequestBuilder createPayment(String paymentToken) throws IllegalArgumentException {
        if (paymentToken == null) throw new IllegalArgumentException("\"paymentToken\" is required but got null");
            

        return new CreatePaymentRequestBuilder(paymentToken);
    }
}
